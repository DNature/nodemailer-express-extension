var _ = require("lodash");
var fs = require("fs");
var log = require("./logger");
var mkdirp = require('mkdirp');
var path = require("path");
var Q = require("q");
var LocPrep;
(function (LocPrep) {
    function makeReplacements(document, resources, defaults) {
        var locDocument = _.isArray(document) ? [] : {};
        for (var key in document) {
            if (propertyIsComment(key)) {
                continue;
            }
            else if (_.isObject(document[key])) {
                locDocument[key] = makeReplacements(document[key], resources, defaults);
            }
            else if (_.isString(document[key]) && _.startsWith(document[key], "resource:")) {
                var resourceKey = document[key].substr("resource:".length).trim();
                var replacement = resources[resourceKey];
                if (!_.isString(replacement)) {
                    replacement = defaults[resourceKey];
                    log.warn("Could not find a replacement for resource key %s. Falling back to '%s'.", resourceKey, replacement);
                }
                locDocument[key] = replacement;
            }
            else {
                locDocument[key] = document[key];
            }
        }
        return locDocument;
    }
    LocPrep.makeReplacements = makeReplacements;
    function writeResourceFile(fullResjsonPath, resources) {
        return Q.Promise(function (resolve, reject, notify) {
            fs.exists(fullResjsonPath, function (exists) {
                resolve(exists);
            });
        }).then(function (exists) {
            if (exists) {
                return Q.nfcall(fs.lstat, fullResjsonPath).then(function (obj) {
                    return obj.isDirectory();
                }).then(function (isDir) {
                    if (isDir) {
                        return path.join(fullResjsonPath, "extension.resjson");
                    }
                    else {
                        return fullResjsonPath;
                    }
                });
            }
            else {
                return Q.resolve(fullResjsonPath);
            }
        }).then(function (determinedPath) {
            return Q.nfcall(mkdirp, path.dirname(determinedPath)).then(function () {
                return Q.nfcall(fs.writeFile, determinedPath, JSON.stringify(resources, null, 4), "utf8");
            });
        });
    }
    LocPrep.writeResourceFile = writeResourceFile;
    function propertyIsComment(property) {
        return _.startsWith(property, "_") && _.endsWith(property, ".comment");
    }
    LocPrep.propertyIsComment = propertyIsComment;
    var LocKeyGenerator = (function () {
        function LocKeyGenerator(vsoManifest, vsixManifest) {
            this.vsoManifest = vsoManifest;
            this.vsixManifest = vsixManifest;
            this.initStringObjs();
        }
        LocKeyGenerator.prototype.initStringObjs = function () {
            this.vsoManifestStrings = {};
            this.combined = {};
        };
        LocKeyGenerator.prototype.generateLocalizationKeys = function () {
            this.initStringObjs();
            this.vsoReplaceWithKeysAndGenerateDefaultStrings(this.vsoManifest);
            this.vsixGenerateDefaultStrings();
            return this.splitIntoVsoAndVsixResourceObjs(this.vsoManifestStrings);
        };
        LocKeyGenerator.prototype.addResource = function (sourceKey, resourceKey, obj) {
            var resourceVal = this.removeI18nPrefix(obj[sourceKey]);
            this.vsoManifestStrings[resourceKey] = resourceVal;
            var comment = obj["_" + sourceKey + ".comment"];
            if (comment) {
                this.vsoManifestStrings["_" + resourceKey + ".comment"] = comment;
            }
            obj[sourceKey] = "resource:" + resourceKey;
        };
        LocKeyGenerator.prototype.removeI18nPrefix = function (str) {
            if (_.startsWith(str, LocKeyGenerator.I18N_PREFIX)) {
                return str.substr(LocKeyGenerator.I18N_PREFIX.length);
            }
            return str;
        };
        LocKeyGenerator.prototype.splitIntoVsoAndVsixResourceObjs = function (resources) {
            var vsixManifestStrings = {
                VsixLanguagePack: {
                    $: {
                        Version: "1.0.0",
                        xmlns: "http://schemas.microsoft.com/developer/vsx-schema-lp/2010"
                    },
                    LocalizedName: [null],
                    LocalizedDescription: [null],
                    LocalizedReleaseNotes: [null],
                    License: [null],
                    MoreInfoUrl: [null]
                }
            };
            var vsoManifestStrings = {};
            for (var key in resources) {
                switch (key) {
                    case "displayName":
                        vsixManifestStrings.VsixLanguagePack.LocalizedName[0] = resources[key];
                        break;
                    case "description":
                        vsixManifestStrings.VsixLanguagePack.LocalizedDescription[0] = resources[key];
                        break;
                    case "releaseNotes":
                        vsixManifestStrings.VsixLanguagePack.LocalizedReleaseNotes[0] = resources[key];
                        break;
                    default:
                        vsoManifestStrings[key] = resources[key];
                        break;
                }
            }
            return {
                vsixResources: vsixManifestStrings,
                vsoResources: vsoManifestStrings,
                combined: resources
            };
        };
        LocKeyGenerator.prototype.vsixGenerateDefaultStrings = function () {
            var displayName = _.get(this.vsixManifest, "PackageManifest.Metadata[0].DisplayName[0]");
            var description = _.get(this.vsixManifest, "PackageManifest.Metadata[0].Description[0]._");
            var releaseNotes = _.get(this.vsixManifest, "PackageManifest.Metadata[0].ReleaseNotes[0]");
            if (displayName) {
                var cleanDisplayName = this.removeI18nPrefix(displayName);
                this.vsoManifestStrings["displayName"] = cleanDisplayName;
                _.set(this.vsixManifest, "PackageManifest.Metadata[0].DisplayName[0]", cleanDisplayName);
            }
            if (description) {
                var cleanDescription = this.removeI18nPrefix(description);
                this.vsoManifestStrings["description"] = this.removeI18nPrefix(cleanDescription);
                _.set(this.vsixManifest, "PackageManifest.Metadata[0].Description[0]._", cleanDescription);
            }
            if (releaseNotes) {
                var cleanReleaseNotes = this.removeI18nPrefix(releaseNotes);
                this.vsoManifestStrings["releaseNotes"] = this.removeI18nPrefix(cleanReleaseNotes);
                _.set(this.vsixManifest, "PackageManifest.Metadata[0].ReleaseNotes[0]", cleanReleaseNotes);
            }
        };
        LocKeyGenerator.prototype.vsoReplaceWithKeysAndGenerateDefaultStrings = function (vsoManifest, path) {
            if (path === void 0) { path = ""; }
            for (var key in vsoManifest) {
                var val = vsoManifest[key];
                if (_.isObject(val)) {
                    var nextPath = path + key + ".";
                    if (path === "contributions." && vsoManifest[key] && vsoManifest[key]["id"]) {
                        nextPath = path + vsoManifest[key]["id"] + ".";
                    }
                    this.vsoReplaceWithKeysAndGenerateDefaultStrings(val, nextPath);
                }
                else if (_.isString(val) && _.startsWith(val, LocKeyGenerator.I18N_PREFIX)) {
                    this.addResource(key, path + key, vsoManifest);
                }
            }
        };
        LocKeyGenerator.I18N_PREFIX = "i18n:";
        return LocKeyGenerator;
    })();
    LocPrep.LocKeyGenerator = LocKeyGenerator;
})(LocPrep = exports.LocPrep || (exports.LocPrep = {}));

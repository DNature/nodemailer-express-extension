{
    "Express started generator": {
        "prefix": "!exp",
        "body": [
            "const express = require('express');",
            "",
            "const app = express();",
            "",
            "router.get('/$1', (req, res) => {",

            "    res.render('/$2: render your template engiene');",
            "});",
            "",
            "",
            "const PORT = process.env.PORT || 5000;",
            "app.listen(PORT, () => {",
            "   console.log(`Server started on port ${PORT}`);",
            "});"
        ],
        "description": "Creates ES6+ express snippet and can start server on port 5000"
    },

    "Express with Router": {
        "prefix": "!expr",
        "body": [
            "const express = require('express');",
            "const router = express.Router();",
            "",
            ""
        ],
        "description": "Require express with router."
    },

    "Router Get": {
        "prefix": "!rget",
        "body": [
            "router.get('/$1', function(request, response) {",
            "    response.sendFile(__dirname + '/$2.json');",
            "})"
        ],
        "description": "Router get method."
    },

    "Router Post": {
        "prefix": "!rpost",
        "body": [
            "router.post('/$1', function(request, response) {",
            "    $2",
            "})"
        ],
        "description": "Router post method."
    },

    "Router Delete": {
        "prefix": "!rdel",
        "body": [
            "router.delete('/$1', function(request, response) {",
            "    response.sendStatus(200);",
            "})"
        ],
        "description": "Router delete method."
    },

    "Router Export": {
        "prefix": "!exportr",
        "body": ["module.exports = router;"],
        "description": "Exports router."
    },

    "Nodemailer with await": {
        "prefix": "await",
        "body": [
            "'use strict';",
            "",
            "const nodemailer = require('../lib/nodemailer');",
            "",
            "async function main() {",
            "// Generate SMTP service account from ethereal.email",
            "let account = await nodemailer.createTestAccount();",
            "",
            "// NB! Store the account object values somewhere if you want",
            "// to re-use the same account for future mail deliveries",
            "",
            " // Create a SMTP transporter object",
            "console.log('Credentials obtained, sending message...');",
            "",
            "let transporter = nodemailer.createTransport(",
            "{",
            "host: account.smtp.host,",
            "port: account.smtp.port,",
            "secure: account.smtp.secure,",
            "auth: {",
            "user: account.user,",
            "pass: account.pass",
            "},",
            "logger: false,",
            "debug: false // include SMTP traffic in the logs",
            "},",
            "{",
            "// default message fields",
            "",
            "// sender info",
            "from: 'Pangalink <no-reply@pangalink.net>',",
            "headers: {",
            "'X-Laziness-level': 1000 // just an example header, no need to use this",
            "})",
            "};",
            "",
            "// Message object",
            "let message = {",
            "// Comma separated list of recipients",
            "to: 'Andris Reinman <andris.reinman@gmail.com>',",
            "",
            "// Subject of the message",
            "subject: 'Nodemailer is unicode friendly ✔',",
            "",
            "// plaintext body",
            "text: 'Hello to myself!',",
            "",
            "// HTML body",
            "html:",
            "`<p><b>Hello</b> to myself <img src=\"cid: note @example.com\"/></p>",
            "",
            "<p>Here's a nyan cat for you as an embedded attachment:<br/><img src=\"cid:nyan@example.com\"/></p>`,",
            "",
            "// An array of attachments",
            "attachments: [",
            "// String attachment",
            "{",
            "filename: 'notes.txt',",
            "content: 'Some notes about this e-mail',",
            "contentType: 'text/plain' // optional, would be detected from the filename",
            "},",
            "",
            "// Binary Buffer attachment",
            "{",
            "filename: 'image.png',",
            "content: Buffer.from(",
            "'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQAQMAAAAlPW0iAAAABlBMVEUAAAD/' +",
            "'//+l2Z/dAAAAM0lEQVR4nGP4/5/h/1+G/58ZDrAz3D/McH8yw83NDDeNGe4U' +",
            "'g9C9zwz3gVLMDA/A6P9/AFGGFyjOXZtQAAAAAElFTkSuQmCC',",
            "'base64'",
            "),",
            "",
            "cid: 'note@example.com' // should be as unique as possible",
            "},",
            "",
            "// File Stream attachment",
            "{",
            "filename: 'nyan cat ✔.gif',",
            "path: __dirname + '/assets/nyan.gif',",
            "cid: 'nyan@example.com' // should be as unique as possible",
            "}",
            "]",
            "};",
            "",
            "let info = await transporter.sendMail(message);",
            "",
            "console.log('Message sent successfully!');",
            "console.log(nodemailer.getTestMessageUrl(info));",
            "",
            "// only needed when using pooled connections",
            "transporter.close();",
            "}",
            "",
            "main().catch(err => {",
            "console.error(err.message);",
            "process.exit(1);",
            "});"
        ],
        "description": "Generates nodemailer code example for async await functions"
    }
}